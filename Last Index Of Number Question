Given an array of length N and an integer x, you need to find and return the last index of integer x present in the array. Return -1 if it is not present in the array.
Last index means - if x is present multiple times in the array, return the index at which x comes last in the array.
You should start traversing your array from 0, not from (N - 1).
Do this recursively. Indexing in the array starts from 0.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Line 3 : Integer x
Output Format :
last index or -1
Constraints :
1 <= N <= 10^3
Sample Input :
4
9 8 10 8
8
Sample Output :
3

solution for this code is::""::
from math import *
from collections import *
from sys import *
from os import *

## Read input as specified in the question.
## Print output as specified in the question.
def lastIndex(arr, x):
    # Base case: If the array is empty, return -1
    if not arr:
        return -1

    # Recursively search for x in the rest of the array
    subarray_result = lastIndex(arr[1:], x)

    # If x is found in the subarray, return the index in the subarray + 1
    if subarray_result != -1:
        return subarray_result + 1

    # If the first element of the array is equal to x, return 0 (last index)
    if arr[0] == x:
        return 0

    # If x is not found in the subarray and the first element is not x, return -1
    return -1

# Main
n = int(input())
arr = list(map(int, input().strip().split(' ')))
x = int(input())

# Call the function to find the last index of x
result = lastIndex(arr, x)

# Output
print(result)

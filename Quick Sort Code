Given the 'start' and the 'end'' positions of the array 'input'. Your task is to sort the elements between 'start' and 'end' using quick sort.


Note :
Make changes in the input array itself.
Input format :
Line 1 : Integer N i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 2 3 5 7
Sample Output 2 :
1 2 3 5 7 
Constraints :
1 <= N <= 10^3
0 <= input[i] <= 10^9
-----------------------------------------------------------------------
solution for this code is here:

from typing import List

def quickSort(arr: List[int], startIndex: int, endIndex: int):
    if startIndex < endIndex:
        # Partition the array and get the pivot index
        pivotIndex = partition(arr, startIndex, endIndex)
        
        # Recursively sort the subarrays
        quickSort(arr, startIndex, pivotIndex - 1)
        quickSort(arr, pivotIndex + 1, endIndex)

def partition(arr: List[int], startIndex: int, endIndex: int) -> int:
    pivot = arr[endIndex]
    i = startIndex - 1
    
    for j in range(startIndex, endIndex):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    
    arr[i + 1], arr[endIndex] = arr[endIndex], arr[i + 1]
    return i + 1

# Main
if __name__ == "__main__":
    N = int(input())
    ARR = list(map(int, input().split()))
    
    quickSort(ARR, 0, N - 1)
    
    # Print the sorted array
    for i in range(N):
        if i == N - 1:
            print(ARR[i])
        else:
            print(ARR[i], end=" ")

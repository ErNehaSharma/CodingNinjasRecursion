*****Geometric Sum*****

Given k, find the geometric sum i.e.
1 + 1/2 + 1/4 + 1/8 + ... + 1/(2^k) 
using recursion.
Input format :
Integer k
Output format :
Geometric sum (upto 5 decimal places)
Constraints :
0 <= k <= 1000
Sample Input 1 :
3
Sample Output 1 :
1.87500
Sample Input 2 :
4
Sample Output 2 :
1.93750
Explanation for Sample Input 1:
1+ 1/(2^1) + 1/(2^2) + 1/(2^3) = 1.87500

solution for this code is here::
from math import *
from collections import *
from sys import *
from os import *

def geometricSum(k):
    # Base case: When k is 0, return 1.0
    if k == 0:
        return 1.0
    
    # Calculate the sum recursively for k-1 and add 1/(2^k) to it
    smallOutput = geometricSum(k - 1)
    currentTerm = 1 / (2 ** k)
    
    # Return the sum of the small output and the current term
    return smallOutput + currentTerm

# Main
k = int(input())
result = geometricSum(k)

# Print the result with up to 5 decimal places
print("{:.5f}".format(result))
